<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jakartaee on Gunnar Morling</title>
    <link>https://www.morling.dev/tags/jakartaee/</link>
    <description>Recent content in jakartaee on Gunnar Morling</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2019 - 2025 Gunnar Morling</copyright>
    <lastBuildDate>Wed, 29 Jan 2020 15:30:00 +0100</lastBuildDate>
    <atom:link href="https://www.morling.dev/tags/jakartaee/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Monitoring REST APIs with Custom JDK Flight Recorder Events</title>
      <link>https://www.morling.dev/blog/rest-api-monitoring-with-custom-jdk-flight-recorder-events/</link>
      <pubDate>Wed, 29 Jan 2020 15:30:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/rest-api-monitoring-with-custom-jdk-flight-recorder-events/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://openjdk.java.net/jeps/328&#34;&gt;JDK Flight Recorder&lt;/a&gt; (JFR) is an invaluable tool for gaining deep insights into the performance characteristics of Java applications.&#xA;Open-sourced in JDK 11, JFR provides a low-overhead framework for collecting events from Java applications, the JVM and the operating system.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;In this blog post we’re going to explore how custom, application-specific JFR events can be used to monitor a REST API, allowing to track request counts, identify long-running requests and more.&#xA;We’ll also discuss how the JFR &lt;a href=&#34;https://openjdk.java.net/jeps/349&#34;&gt;Event Streaming API&lt;/a&gt; new in Java 14 can be used to export live events,&#xA;making them available for monitoring and alerting via tools such as Prometheus and Grafana.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Enforcing Java Record Invariants With Bean Validation</title>
      <link>https://www.morling.dev/blog/enforcing-java-record-invariants-with-bean-validation/</link>
      <pubDate>Mon, 20 Jan 2020 17:30:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/enforcing-java-record-invariants-with-bean-validation/</guid>
      <description>Record types are one of the most awaited features in Java 14; they promise to &amp;#34;provide a compact syntax for declaring classes which are transparent holders for shallowly immutable data&amp;#34;. One example where records should be beneficial are data transfer objects (DTOs), as e.g. found in the remoting layer of enterprise applications. Typically, certain rules should be applied to the attributes of such DTO, e.g. in terms of allowed values.</description>
    </item>
  </channel>
</rss>
