<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gunnar Morling</title>
    <link>https://www.morling.dev/</link>
    <description>Recent content on Gunnar Morling</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>¬© 2019 - 2025 Gunnar Morling</copyright>
    <lastBuildDate>Thu, 24 Apr 2025 16:25:00 +0200</lastBuildDate>
    <atom:link href="https://www.morling.dev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What If We Could Rebuild Kafka From Scratch?</title>
      <link>https://www.morling.dev/blog/what-if-we-could-rebuild-kafka-from-scratch/</link>
      <pubDate>Thu, 24 Apr 2025 16:25:00 +0200</pubDate>
      <guid>https://www.morling.dev/blog/what-if-we-could-rebuild-kafka-from-scratch/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;Update April 25: This post is being discussed on  &lt;a href=&#34;https://news.ycombinator.com/item?id=43790420&#34;&gt;Hacker News&lt;/a&gt;, &lt;a href=&#34;https://lobste.rs/s/8s6cxz/what_if_we_could_rebuild_kafka_from&#34;&gt;lobste.rs&lt;/a&gt;, and &lt;a href=&#34;https://old.reddit.com/r/apachekafka/comments/1k6u6jw/what_if_we_could_rebuild_kafka_from_scratch/&#34;&gt;/r/apachekafka&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The last few days I spent some time digging into the recently announced &lt;a href=&#34;https://cwiki.apache.org/confluence/display/KAFKA/KIP-1150%3A+Diskless+Topics&#34;&gt;KIP-1150&lt;/a&gt; (&amp;#34;Diskless Kafka&amp;#34;), as well &lt;a href=&#34;https://github.com/AutoMQ/automq&#34;&gt;AutoMQ‚Äôs Kafka fork&lt;/a&gt;, tightly integrating Apache Kafka and object storage, such as S3. Following the example set by WarpStream, these projects aim to substantially improve the experience of using Kafka in cloud environments, providing better elasticity, drastically reducing cost, and paving the way towards native lakehouse integration.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;This got me thinking, if we were to start all over and develop a durable cloud-native event log from scratch‚Äî‚ÄãKafka.next if you will‚Äî‚Äãwhich traits and characteristics would be desirable for this to have? Separating storage and compute and object store support would be table stakes, but what else should be there? Having used Kafka for many years for building event-driven applications as well as for running realtime ETL and change data capture pipelines, here‚Äôs my personal wishlist:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>A Deep Dive Into Ingesting Debezium Events From Kafka With Flink SQL</title>
      <link>https://www.morling.dev/blog/ingesting-debezium-events-from-kafka-with-flink-sql/</link>
      <pubDate>Wed, 16 Apr 2025 11:25:00 +0200</pubDate>
      <guid>https://www.morling.dev/blog/ingesting-debezium-events-from-kafka-with-flink-sql/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Over the years, I‚Äôve spoken quite a bit about the use cases for processing &lt;a href=&#34;https://2023.javazone.no/program/355869fa-5aa0-43a7-abd2-7c5250e10bcd&#34;&gt;Debezium data change events with Apache Flink&lt;/a&gt;,&#xA;such as metadata enrichment, building denormalized data views, and creating data contracts for your CDC streams.&#xA;One detail I haven‚Äôt covered in depth so far is how to actually ingest Debezium change events from a Kafka topic into Flink,&#xA;in particular via Flink SQL.&#xA;Several connectors and data formats exist for this, which can make things somewhat confusing at first.&#xA;So let‚Äôs dive into the different options and the considerations around them!&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building a Native Binary for Apache Kafka on macOS</title>
      <link>https://www.morling.dev/blog/building-native-binary-for-apache-kafka-macos/</link>
      <pubDate>Mon, 07 Apr 2025 12:25:00 +0200</pubDate>
      <guid>https://www.morling.dev/blog/building-native-binary-for-apache-kafka-macos/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;With help of the GraalVM configuration developed for KIP-974 (Docker Image for GraalVM based Native Kafka Broker),&#xA;you can easily build a self-contained native binary for Apache Kafka.&#xA;Read on to learn how you can build a native Kafka executable yourself,&#xA;starting in milli-seconds, making it a perfect fit for development and testing purposes&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;When I wrote about &lt;a href=&#34;https://www.morling.dev/blog/jep-483-aot-class-loading-linking/&#34;&gt;ahead-of-time class loading and linking in Java 24&lt;/a&gt; recently,&#xA;I also published the start-up time for Apache Kafka as a native binary for comparison.&#xA;This was done via Docker, as there‚Äôs no pre-built native binary of Kafka available for the operating system I‚Äôm running on, macOS.&#xA;But there is a native Kafka container image, so this is what I chose for the sake of convenience.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Now, running in a container adds a little bit of overhead of course,&#xA;so it wasn‚Äôt a surprise when Thomas W√ºrthinger, lead of the GraalVM project at Oracle,&#xA;&lt;a href=&#34;https://bsky.app/profile/thomaswue.dev/post/3lloypreatk2s&#34;&gt;brought up the question&lt;/a&gt; what the value would be when running Kafka natively on macOS.&#xA;Needless to say I can‚Äôt leave this kind of nice nerd snipe pass,&#xA;so I set out to learn how to build a native Kafka binary on macOS, using GraalVM.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Let&#39;s Take a Look at... JEP 483: Ahead-of-Time Class Loading &amp; Linking!</title>
      <link>https://www.morling.dev/blog/jep-483-aot-class-loading-linking/</link>
      <pubDate>Thu, 27 Mar 2025 14:00:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/jep-483-aot-class-loading-linking/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;In the &amp;#34;Let‚Äôs Take a Look at‚Ä¶‚Äã!&amp;#34; blog series I am exploring interesting projects, developments and technologies in the data and streaming space. This can be KIPs and FLIPs, open-source projects, services, relevant improvements to Java and the JVM, and more. The idea is to get some hands-on experience, learn about potential use cases and applications, and understand the trade-offs involved. If you think there‚Äôs a specific subject I should take a look at, let me know in the comments below.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;Update March 28: This post is on &lt;a href=&#34;https://news.ycombinator.com/item?id=43503960&#34;&gt;being discussed Hacker News&lt;/a&gt;&lt;/em&gt; üçä&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://openjdk.org/projects/jdk/24/&#34;&gt;Java 24&lt;/a&gt; got released last week,&#xA;and what a meaty release it is:&#xA;more than twenty Java Enhancement Proposals (JEPs) have been shipped,&#xA;including highlights such as compact object headers (&lt;a href=&#34;https://openjdk.org/jeps/450&#34;&gt;JEP 450&lt;/a&gt;, I hope to spend some time diving into that one some time soon),&#xA;a new class-file API (&lt;a href=&#34;https://openjdk.org/jeps/484&#34;&gt;JEP 484&lt;/a&gt;),&#xA;and more flexible constructor bodies (&lt;a href=&#34;https://openjdk.org/jeps/492&#34;&gt;JEP 492&lt;/a&gt;, third preview).&#xA;One other JEP which might fly a bit under the radar is &lt;a href=&#34;https://openjdk.org/jeps/483&#34;&gt;JEP 483&lt;/a&gt; (&amp;#34;Ahead-of-Time Class Loading &amp;amp; Linking&amp;#34;).&#xA;It promises to reduce the start-up time of Java applications without requiring any modifications to the application itself,&#xA;what‚Äôs not to be liked about that?&#xA;Let‚Äôs take a closer look!&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>The Synchrony Budget</title>
      <link>https://www.morling.dev/blog/the-synchrony-budget/</link>
      <pubDate>Tue, 18 Mar 2025 14:00:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/the-synchrony-budget/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;Update March 27: This post is being  &lt;a href=&#34;https://news.ycombinator.com/item?id=43452793&#34;&gt;discussed on Hacker News&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;For building a system of distributed services, one concept I think is very valuable to keep in mind is what I call the &lt;em&gt;synchrony budget&lt;/em&gt;:&#xA;as much as possible, a service should minimize the number of synchronous requests which it makes to other services.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Let&#39;s Take a Look at... KIP-932: Queues for Kafka!</title>
      <link>https://www.morling.dev/blog/kip-932-queues-for-kafka/</link>
      <pubDate>Wed, 05 Mar 2025 12:35:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/kip-932-queues-for-kafka/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;In the &amp;#34;Let‚Äôs Take a Look at‚Ä¶‚Äã!&amp;#34; blog series I am going to explore interesting projects, developments and technologies in the data and streaming space. This can be KIPs and FLIPs, open-source projects, services, and more. The idea is to get some hands-on experience, learn about potential use cases and applications, and understand the trade-offs involved. If you think there‚Äôs a specific subject I should take a look at, let me know in the comments below!&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;span class=&#34;image&#34;&gt;&lt;img src=&#34;https://www.morling.dev/images/kip_932_1.jpg&#34; alt=&#34;kip 932 1&#34; width=&#34;333px&#34;/&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;That guy above? Yep, that‚Äôs me, whenever someone says &amp;#34;Kafka queue&amp;#34;. Because, that‚Äôs not what Apache Kafka is. At its core, Kafka is a distributed durable event log. Producers write events to a topic, organized in partitions which are distributed amongst the brokers of a Kafka cluster. Consumers, organized in groups, divide the partitions they process amongst themselves, so that each partition of a topic is read by exactly one consumer in the group.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Thoughts On Moving Debezium to the Commonhaus Foundation</title>
      <link>https://www.morling.dev/blog/thoughts-on-moving-debezium-to-commonhaus-foundation/</link>
      <pubDate>Wed, 27 Nov 2024 17:25:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/thoughts-on-moving-debezium-to-commonhaus-foundation/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;If you are following the news around Debezium‚Äî‚Äãan open-source platform for Change Data Capture (CDC) for a variety of databases‚Äî‚Äãyou may have seen the announcement that the project is in the process of &lt;a href=&#34;https://debezium.io/blog/2024/11/04/debezium-moving-to-commonhaus/&#34;&gt;moving to the Commonhaus Foundation&lt;/a&gt;. I think this is excellent news for the Debezium project, its community, and open-source CDC at large. In this post I‚Äôd like to share some more context on why I am so excited about this development.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building OpenJDK From Source On macOS</title>
      <link>https://www.morling.dev/blog/building-openjdk-from-source-on-macos/</link>
      <pubDate>Sat, 16 Nov 2024 15:25:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/building-openjdk-from-source-on-macos/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Every now and then, it can come in very handy to build OpenJDK from source yourself,&#xA;for instance if you want to explore a feature which is under development on a branch for which no builds are published.&#xA;For some reason I always thought that building OpenJDK is a very complex processing,&#xA;requiring the installation of arcane tool chains etc.&#xA;But as it turns out, this actually not true:&#xA;the project does a great job of documenting what‚Äôs needed and only a few steps are necessary to build your very own JDK.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Conferences</title>
      <link>https://www.morling.dev/conferences/</link>
      <pubDate>Thu, 07 Nov 2024 19:15:00 +0100</pubDate>
      <guid>https://www.morling.dev/conferences/</guid>
      <description>This page gives an overview over some talks I have done over the last years. I have spoken at large conferences such as QCon San Francisco, Devoxx and JavaOne, local meet-ups as well as company-internal events, covering topics such as Debezium and Change Data Capture, Bean Validation, NoSQL and more.&#xA;If you‚Äôd like to have me as a speaker at your conference or meet-up, please get in touch.&#xA;2025 Current (Bengaluru, India): Ins and Outs of the Outbox Pattern</description>
    </item>
    <item>
      <title>CDC Is a Feature Not a Product</title>
      <link>https://www.morling.dev/blog/cdc-is-a-feature-not-a-product/</link>
      <pubDate>Fri, 18 Oct 2024 15:55:00 +0200</pubDate>
      <guid>https://www.morling.dev/blog/cdc-is-a-feature-not-a-product/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;During and after my time as the lead of &lt;a href=&#34;https://debezium.io/&#34;&gt;Debezium&lt;/a&gt;,&#xA;a widely used open-source platform for Change Data Capture (CDC) for a variety of database,&#xA;I got repeatedly asked whether I‚Äôd be interested in creating a company around CDC.&#xA;VCs, including wellknown household names, did and do reach out to me,&#xA;pitching this idea.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>How I Am Setting Up VMs On Hetzner Cloud</title>
      <link>https://www.morling.dev/blog/how-i-am-setting-up-vms-on-hetzner-cloud/</link>
      <pubDate>Sun, 06 Oct 2024 20:25:00 +0200</pubDate>
      <guid>https://www.morling.dev/blog/how-i-am-setting-up-vms-on-hetzner-cloud/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Whenever I‚Äôve need a Linux box for some testing or experimentation,&#xA;or projects like the &lt;a href=&#34;https://www.morling.dev/blog/1brc-results-are-in/&#34;&gt;One Billion Row Challenge&lt;/a&gt; a few months back,&#xA;my go-to solution is &lt;a href=&#34;https://www.hetzner.com/&#34;&gt;Hetzner Online&lt;/a&gt;, a data center operator here in Europe.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Their prices for VMs are unbeatable, starting with 3,92 ‚Ç¨/month for two shared vCPUs (either x64 or AArch64), four GB of RAM, and 20 TB of network traffic&#xA;(these are prices for their German data centers, they vary between regions).&#xA;four dedicated cores with 16 GB, e.g. for running a small web server, will cost you 28.55 ‚Ç¨/month.&#xA;Getting a box with similar specs on AWS would set you back a multiple of that, with the (outbound) network cost being the largest chunk.&#xA;So it‚Äôs not a big surprise that more and more people realize the advantages of this offering,&#xA;most notably Ruby on Rails creator &lt;a href=&#34;https://x.com/dhh/&#34;&gt;David Heinemeier Hansson&lt;/a&gt;,&#xA;who has been singing the praise for Hetzner‚Äôs dedicated servers, but also their VM instances, quite a bit on &lt;a href=&#34;https://x.com/search?q=from%3Adhh%20hetzner&amp;amp;src=typed_query&amp;amp;f=live&#34;&gt;Twitter&lt;/a&gt; lately.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Leader Election With S3 Conditional Writes</title>
      <link>https://www.morling.dev/blog/leader-election-with-s3-conditional-writes/</link>
      <pubDate>Mon, 26 Aug 2024 09:15:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/leader-election-with-s3-conditional-writes/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;Update Aug 30: This article is discussed on &lt;a href=&#34;https://news.ycombinator.com/item?id=41357123&#34;&gt;Hacker News&lt;/a&gt; and &lt;a href=&#34;https://lobste.rs/s/ljq5pm/leader_election_with_s3_conditional&#34;&gt;lobste.rs&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;In distributed systems, for instance when scaling out some workload to multiple compute nodes,&#xA;it is a common requirement to select a &lt;em&gt;leader&lt;/em&gt; for performing a given task:&#xA;only one of the nodes should process the records from a Kafka topic partition, write to a file system, call a remote API, etc.&#xA;Otherwise, multiple workers may end up doing the same task twice, overwriting each other‚Äôs data, and worse.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Shell Spell: Extracting and Propagating Multiple Values With jq</title>
      <link>https://www.morling.dev/blog/extracting-and-propagating-multiple-values-with-jq/</link>
      <pubDate>Sat, 06 Jul 2024 11:20:00 +0200</pubDate>
      <guid>https://www.morling.dev/blog/extracting-and-propagating-multiple-values-with-jq/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;In my day job at &lt;a href=&#34;https://www.decodable.co/&#34;&gt;Decodable&lt;/a&gt;,&#xA;I am currently working with Terraform to provision some cloud infrastructure for an upcoming hands-on lab.&#xA;Part of this set-up is a Postgres database on Amazon RDS,&#xA;which I am creating using the &lt;a href=&#34;https://developer.hashicorp.com/terraform/tutorials/aws/aws-rds&#34;&gt;Terraform AWS modules&lt;/a&gt;.&#xA;Now, once my database was up and running,&#xA;I wanted to extract two dynamically generated values from Terraform:&#xA;the random password created for the root user, and the database host URL.&#xA;On my way down the rabbit hole for finding a CLI command for doing this efficiently,&#xA;I learned a few interesting shell details which I‚Äôd like to share.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>A Zipping Gatherer</title>
      <link>https://www.morling.dev/blog/zipping-gatherer/</link>
      <pubDate>Mon, 18 Mar 2024 18:12:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/zipping-gatherer/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The other day, I was looking for means of &lt;a href=&#34;https://twitter.com/gunnarmorling/status/1764305703047438361&#34;&gt;zipping two Java streams&lt;/a&gt;:&#xA;connecting them element by element‚Äî‚Äãessentially a join based on stream offset position‚Äî‚Äãand emitting an output stream with the results.&#xA;Unfortunately, there is no &lt;code&gt;zip()&lt;/code&gt; method offered by the Java Streams API itself.&#xA;While it was considered for inclusion in early preview versions,&#xA;the method was removed before the API went GA with Java 8 and you have to resort to 3rd party libraries such as &lt;a href=&#34;https://guava.dev/releases/snapshot-jre/api/docs/com/google/common/collect/Streams.html#zip(java.util.stream.Stream,java.util.stream.Stream,java.util.function.BiFunction)&#34;&gt;Google Guava&lt;/a&gt; if you need this functionality.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Podcasts and Interviews</title>
      <link>https://www.morling.dev/podcasts/</link>
      <pubDate>Mon, 11 Mar 2024 14:45:00 +0100</pubDate>
      <guid>https://www.morling.dev/podcasts/</guid>
      <description>I had the pleasure to do a few podcasts and interviews, e.g. talking about Debezium, change data capture, stream processing, my career, and software engineering in general.&#xA;Unapologetically Technical with Jesse Anderson: Ep.9 Gunnar Morling - One Billion Row Challenge&#xA;Interview with InfoQ: The One Billion Row Challenge Shows That Java Can Process a One Billion Rows File in Two Seconds&#xA;Coffee + Software with Josh Long: Gunnar Morling on the 1BRC</description>
    </item>
    <item>
      <title>Last Updated Columns With Postgres</title>
      <link>https://www.morling.dev/blog/last-updated-columns-with-postgres/</link>
      <pubDate>Tue, 20 Feb 2024 09:15:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/last-updated-columns-with-postgres/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;In many applications it‚Äôs a requirement to keep track of when a record was created and updated the last time.&#xA;Often, this is implemented by having columns such as &lt;code&gt;created_at&lt;/code&gt; and &lt;code&gt;updated_at&lt;/code&gt; within each table.&#xA;To make things as simple as possible for application developers,&#xA;the database itself should take care of maintaining these values automatically when a record gets inserted or updated.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>About Me</title>
      <link>https://www.morling.dev/about/</link>
      <pubDate>Sun, 11 Feb 2024 18:30:00 +0100</pubDate>
      <guid>https://www.morling.dev/about/</guid>
      <description>I am an open-source software engineer in the Java and data streaming space. I currently work as a Technologist at Confluent. In my past role at Decodable I focused on developer outreach and helped them build their stream processing platform based on on Apache Flink. Prior to that, I spent ten years at Red Hat, where I led the Debezium project, a platform for change data capture.&#xA;I have been a long-time committer to multiple open-source projects, including Hibernate, kcctl, JfrUnit, MapStruct and Deptective; I also serve as the spec lead for Bean Validation 2.</description>
    </item>
    <item>
      <title>Filtering Process Output With tee</title>
      <link>https://www.morling.dev/blog/filtering-process-output-with-tee/</link>
      <pubDate>Sat, 10 Feb 2024 11:11:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/filtering-process-output-with-tee/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Recently I ran into a situation where it was necessary to capture the output of a Java process on the &lt;code&gt;stdout&lt;/code&gt; stream,&#xA;and at the same time a filtered subset of the output in a log file.&#xA;The former, so that the output gets picked up by the Kubernetes logging infrastructure.&#xA;The letter for further processing on our end:&#xA;we were looking to detect when the JVM stops due to an &lt;code&gt;OutOfMemoryError&lt;/code&gt;, passing on that information to some error classifier.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>1BRC‚ÄîThe Results Are In!</title>
      <link>https://www.morling.dev/blog/1brc-results-are-in/</link>
      <pubDate>Sun, 04 Feb 2024 16:34:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/1brc-results-are-in/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Oh what a wild ride the last few weeks have been.&#xA;The &lt;a href=&#34;https://www.morling.dev/blog/one-billion-row-challenge/&#34;&gt;One Billion Row Challenge&lt;/a&gt; (1BRC for short),&#xA;something I had expected to be interesting to a dozen folks or so at best,&#xA;has gone kinda viral, with hundreds of people competing and engaging.&#xA;In Java, as intended, but also &lt;a href=&#34;https://github.com/gunnarmorling/1brc/discussions/categories/show-and-tell&#34;&gt;beyond&lt;/a&gt;:&#xA;folks implemented the challenge in languages such as Go, Rust, C/C++, C#, Fortran, or Erlang, as well databases (Postgres, Oracle, Snowflake, etc.), and tools like awk.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;It‚Äôs really incredible how far people have pushed the limits here.&#xA;Pull request by pull request, the execution times for solving the problem layed out in the challenge‚Äâ‚Äî‚Äâaggregating random temperature values from a file with 1,000,000,000 rows‚Äâ‚Äî‚Äâimproved by two orders of magnitudes in comparison to the initial baseline implementation.&#xA;Today I am happy to share the final results, as the challenge closed for new entries after exactly one month on Jan 31&#xA;and all submissions have been reviewed.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Projects</title>
      <link>https://www.morling.dev/projects/</link>
      <pubDate>Sat, 20 Jan 2024 13:40:00 +0100</pubDate>
      <guid>https://www.morling.dev/projects/</guid>
      <description>I have contributed to a wide range of open-source projects over the last years. Here‚Äôs a selection of projects I have been involved with.&#xA;1BRC 1Ô∏è‚É£üêùüèéÔ∏è The One Billion Row Challenge, or 1BRC for short, is a fun exploration of how quickly 1B rows from a text file can be aggregated with Java. It is a coding challenge I ran in January 2024, which provided an opportunity to learn about modern Java APIs, SIMD, and high-performance programming techniques to hundreds of developers.</description>
    </item>
    <item>
      <title>The One Billion Row Challenge</title>
      <link>https://www.morling.dev/blog/one-billion-row-challenge/</link>
      <pubDate>Mon, 01 Jan 2024 00:00:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/one-billion-row-challenge/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;Update Jan 4: Wow, this thing really took off!&lt;/em&gt;&#xA;&lt;em&gt;1BRC is discussed at a couple of places on the internet, including &lt;a href=&#34;https://news.ycombinator.com/item?id=38851337&#34;&gt;Hacker News&lt;/a&gt;, &lt;a href=&#34;https://lobste.rs/s/u2qcnf/one_billion_row_challenge&#34;&gt;lobste.rs&lt;/a&gt;, and &lt;a href=&#34;https://old.reddit.com/r/programming/comments/18x0x0u/the_one_billion_row_challenge/&#34;&gt;Reddit&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;For folks to show-case non-Java solutions, there is a &lt;a href=&#34;https://github.com/gunnarmorling/1brc/discussions/categories/show-and-tell&#34;&gt;&amp;#34;Show &amp;amp; Tell&amp;#34;&lt;/a&gt; now, check that one out for 1BRC implementations in Rust, Go, C++, and others.&lt;/em&gt;&#xA;&lt;em&gt;Some interesting related write-ups include &lt;a href=&#34;https://rmoff.net/2024/01/03/1%EF%B8%8F%E2%83%A3%EF%B8%8F-1brc-in-sql-with-duckdb/&#34;&gt;1BRC in SQL with DuckDB&lt;/a&gt; by Robin Moffatt and &lt;a href=&#34;https://ftisiot.net/posts/1brows/&#34;&gt;1 billion rows challenge in PostgreSQL and ClickHouse&lt;/a&gt; by Francesco Tisiot.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;Thanks a lot for all the submissions, this is going way beyond what I‚Äôd have expected!&lt;/em&gt;&#xA;&lt;em&gt;I am behind a bit with evalutions due to the sheer amount of entries, I will work through them bit by bit.&lt;/em&gt;&#xA;&lt;em&gt;I have also made a few clarifications to &lt;a href=&#34;https://github.com/gunnarmorling/1brc#faq&#34;&gt;the rules&lt;/a&gt; of the challenge; please make sure to read them before submitting any entries.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Let‚Äôs kick off 2024 true coder style‚Äî‚ÄãI‚Äôm excited to announce the &lt;a href=&#34;https://github.com/gunnarmorling/onebrc&#34;&gt;One Billion Row Challenge&lt;/a&gt; (1BRC), running from Jan 1 until Jan 31.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Your mission, should you decide to accept it, is deceptively simple:&#xA;write a Java program for retrieving temperature measurement values from a text file and calculating the min, mean, and max temperature per weather station.&#xA;There‚Äôs just one caveat: the file has &lt;strong&gt;1,000,000,000 rows&lt;/strong&gt;!&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Tracking Java Native Memory With JDK Flight Recorder</title>
      <link>https://www.morling.dev/blog/tracking-java-native-memory-with-jdk-flight-recorder/</link>
      <pubDate>Sun, 17 Dec 2023 19:29:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/tracking-java-native-memory-with-jdk-flight-recorder/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;Update Dec 18: This post is &lt;a href=&#34;https://news.ycombinator.com/item?id=38677628&#34;&gt;discussed on Hacker News&lt;/a&gt;&lt;/em&gt; üçä&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;As regular readers of this blog will now, &lt;a href=&#34;https://openjdk.org/jeps/328&#34;&gt;JDK Flight Recorder&lt;/a&gt; (JFR) is one of my favorite tools of the Java platform.&#xA;This low-overhead event recording engine built into the JVM is invaluable for observing the runtime characteristics of Java applications and identifying any potential performance issues.&#xA;JFR continues to become better and better with every new release,&#xA;with one recent addition being support for native memory tracking (NMT).&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Can Debezium Lose Events?</title>
      <link>https://www.morling.dev/blog/can-debezium-lose-events/</link>
      <pubDate>Tue, 14 Nov 2023 15:00:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/can-debezium-lose-events/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;This question came up on the Data Engineering sub-reddit the other day:&#xA;&lt;a href=&#34;https://old.reddit.com/r/dataengineering/comments/17ttw5e/can_debezium_loose_updates/&#34;&gt;Can Debezium lose any events&lt;/a&gt;?&#xA;I.e. can there be a situation where a record in a database get inserted, updated, or deleted, but Debezium fails to capture that event from the transaction log and propagate it to downstream consumers?&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Finding Java Thread Leaks With JDK Flight Recorder and a Bit Of SQL</title>
      <link>https://www.morling.dev/blog/finding-java-thread-leaks-with-jdk-flight-recorder-and-bit-of-sql/</link>
      <pubDate>Tue, 28 Feb 2023 22:16:10 +0100</pubDate>
      <guid>https://www.morling.dev/blog/finding-java-thread-leaks-with-jdk-flight-recorder-and-bit-of-sql/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The other day at work, we had a situation where we suspected a thread leak in one particular service,&#xA;i.e. code which continuously starts new threads, without taking care of ever stopping them again.&#xA;Each thread requires a bit of memory for its stack space,&#xA;so starting an unbounded number of threads can be considered as a form of memory leak, causing your application to run out of memory eventually.&#xA;In addition, the more threads there are, the more overhead the operating system incurs for scheduling them,&#xA;until the scheduler itself will consume most of the available CPU resources.&#xA;Thus it‚Äôs vital to detect and fix this kind of problem early on.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Getting Started With Java Development in 2023 ‚Äî An Opinionated Guide</title>
      <link>https://www.morling.dev/blog/getting-started-with-java-development-2023/</link>
      <pubDate>Sun, 15 Jan 2023 22:10:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/getting-started-with-java-development-2023/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;27 years of age, and alive and kicking‚Äâ‚Äî‚ÄâThe Java platform regularly comes out amongst the top contenders in rankings like the &lt;a href=&#34;https://www.tiobe.com/tiobe-index/&#34;&gt;TIOBE index&lt;/a&gt;.&#xA;In my opinion, rightly so. The language is very actively maintained and constantly improved;&#xA;its underlying runtime, the Java Virtual Machine (JVM),&#xA;is one of, if not the most, advanced runtime environments for managed programming languages.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;There is a massive eco-system of Java libraries which make it a great tool for a large number of use cases,&#xA;ranging from command-line and desktop applications, over web apps and backend web services, to datastores and stream processing platforms.&#xA;With upcoming features like &lt;a href=&#34;https://openjdk.org/jeps/426&#34;&gt;support for vectorized computations&lt;/a&gt; (SIMD),&#xA;light-weight &lt;a href=&#34;https://openjdk.org/projects/loom&#34;&gt;virtual threads&lt;/a&gt;,&#xA;improved &lt;a href=&#34;https://openjdk.org/projects/panama/&#34;&gt;integration with native code&lt;/a&gt;,&#xA;&lt;a href=&#34;https://openjdk.org/projects/valhalla/&#34;&gt;value objects and user-defined primitives&lt;/a&gt;, and others,&#xA;Java is becoming an excellent tool for solving a larger number of software development tasks than ever before.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Oh... This is Prod?!</title>
      <link>https://www.morling.dev/blog/oh_this_is_prod/</link>
      <pubDate>Thu, 05 Jan 2023 22:10:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/oh_this_is_prod/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;I strongly believe that you should avoid connecting to production environments from local developer machines as much as possible.&#xA;But sometimes, e.g. in order to analyse some specific kinds of failures,&#xA;doing so can be inevitable.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Now, if this is the case, I really, really want to be sure that I‚Äôm aware of the environment I am working in.&#xA;I absolutely want to avoid a situation as in the catchy title of this post,&#xA;when for instance you realize that you just ran some integration test against a production environment.&#xA;In the context of working with the AWS CLI tool this means I‚Äôd like to be aware of the currently active &lt;a href=&#34;https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-profiles.html&#34;&gt;profile&lt;/a&gt; by means of coloring my shell accordingly.&#xA;Here‚Äôs how I‚Äôve set this up using &lt;a href=&#34;https://iterm2.com/&#34;&gt;iTerm2&lt;/a&gt; and &lt;a href=&#34;https://www.zsh.org/&#34;&gt;zsh&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Is your Blocking Queue... Blocking?</title>
      <link>https://www.morling.dev/blog/is-your-blocking-queue-blocking/</link>
      <pubDate>Tue, 03 Jan 2023 22:10:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/is-your-blocking-queue-blocking/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Java‚Äôs &lt;a href=&#34;https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/concurrent/BlockingQueue.html&#34;&gt;&lt;code&gt;BlockingQueue&lt;/code&gt;&lt;/a&gt; hierarchy is widely used for coordinating work between different producer and consumer threads.&#xA;When set up with a maximum capacity (i.e. a &lt;em&gt;bounded queue&lt;/em&gt;), no more elements can be added by producers to the queue once it is full, until a consumer has taken at least one element.&#xA;For scenarios where new work may arrive more quickly than it can be consumed, this applies means of back-pressure,&#xA;ensuring the application doesn‚Äôt run out of memory eventually, while enqueuing more and more work items.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Maven, What Are You Waiting For?!</title>
      <link>https://www.morling.dev/blog/maven-what-are-you-waiting-for/</link>
      <pubDate>Sun, 18 Dec 2022 13:45:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/maven-what-are-you-waiting-for/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;As part of my &lt;a href=&#34;https://www.morling.dev/blog/why-i-joined-decodable/&#34;&gt;new job&lt;/a&gt; at Decodable,&#xA;I am also planning to contribute to the &lt;a href=&#34;https://flink.apache.org/&#34;&gt;Apache Flink&lt;/a&gt; project&#xA;(as Decodable‚Äôs fully-managed &lt;a href=&#34;https://www.decodable.co/product&#34;&gt;stream processing platform&lt;/a&gt; is based on Flink).&#xA;Right now, I am in the process of familiarizing myself with the Flink code base,&#xA;and as such I am of course building the project from source, too.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>The Insatiable Postgres Replication Slot</title>
      <link>https://www.morling.dev/blog/insatiable-postgres-replication-slot/</link>
      <pubDate>Wed, 30 Nov 2022 14:00:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/insatiable-postgres-replication-slot/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;While working on a demo for processing change events from Postgres with Apache Flink,&#xA;I noticed an interesting phenomenon:&#xA;A Postgres database which I had set up for that demo on Amazon RDS, ran out of disk space.&#xA;The machine had a disk size of 200 GiB which was fully used up in the course of less than two weeks.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Now a common cause for this kind of issue are replication slots which are not advanced:&#xA;in that case, Postgres will hold on to all WAL segments after the latest log sequence number (&lt;a href=&#34;https://pgpedia.info/l/LSN-log-sequence-number.html&#34;&gt;LSN&lt;/a&gt;) which was confirmed for that slot.&#xA;Indeed I had set up a replication slot (via the &lt;a href=&#34;https://www.decodable.co/connectors/postgres-cdc&#34;&gt;Decodable CDC source connector for Postgres&lt;/a&gt;, which is based on &lt;a href=&#34;https://debezium.io&#34;&gt;Debezium&lt;/a&gt;).&#xA;I then had stopped that connector, causing the slot to become inactive.&#xA;The problem was though that I was really sure that there was no traffic in that database whatsoever!&#xA;What could cause a WAL growth of ~18 GB/day then?&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Running a Quarkus Native Application on Render</title>
      <link>https://www.morling.dev/blog/running-quarkus-native-app-on-render/</link>
      <pubDate>Mon, 28 Nov 2022 11:45:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/running-quarkus-native-app-on-render/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;This is a quick run down of the steps required for running JVM applications,&#xA;built using Quarkus and GraalVM, on Render.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://render.com/&#34;&gt;Render&lt;/a&gt; is a cloud platform for running websites and applications.&#xA;Like most other comparable services such as &lt;a href=&#34;https://fly.io/&#34;&gt;fly.io&lt;/a&gt;,&#xA;it offers a decent free tier, which lets you try out the service without any financial commitment.&#xA;&lt;em&gt;Unlike&lt;/em&gt; most other services,&#xA;with Render, you don‚Äôt need to provide a credit card in order to use the free tier.&#xA;Which means there‚Äôs no risk of surprise bills, as often is the case with pay-per-use models,&#xA;where a malicious actor could DDOS your service and drive up cost for consumed CPU resources or egress bandwidth indefinitely.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Why I Joined Decodable</title>
      <link>https://www.morling.dev/blog/why-i-joined-decodable/</link>
      <pubDate>Thu, 03 Nov 2022 15:00:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/why-i-joined-decodable/</guid>
      <description>It‚Äôs my first week as a software engineer at Decodable, a start-up building a serverless real-time data platform! When I shared this news on social media yesterday, folks were not only super supportive and excited for me (thank you so much for all the nice words and wishes!), but some also asked about the reasons behind my decision for switching jobs and going to a start-up, after having worked for Red Hat for the last few years.</description>
    </item>
    <item>
      <title>An Ideation for Kubernetes-native Kafka Connect</title>
      <link>https://www.morling.dev/blog/ideation-kubernetes-native-kafka-connect/</link>
      <pubDate>Tue, 06 Sep 2022 14:20:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/ideation-kubernetes-native-kafka-connect/</guid>
      <description>Kafka Connect, part of the Apache Kafka project, is a development framework and runtime for connectors which either ingest data into Kafka clusters (source connectors) or propagate data from Kafka into external systems (sink connectors). A diverse ecosystem of ready-made connectors has come to life on top of Kafka Connect, which lets you connect all kinds of data stores, APIs, and other systems to Kafka in a no-code approach.</description>
    </item>
    <item>
      <title>Testing Kafka Connectors</title>
      <link>https://www.morling.dev/blog/testing-kafka-connectors/</link>
      <pubDate>Thu, 25 Aug 2022 09:20:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/testing-kafka-connectors/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://kafka.apache.org/documentation/#connect&#34;&gt;Kafka Connect&lt;/a&gt; is a key factor for the wide-spread adoption of Apache Kafka:&#xA;a framework and runtime environment for connectors,&#xA;it makes the task of getting data either into Kafka or out of Kafka solely a matter of configuration,&#xA;rather than a bespoke programming job.&#xA;There‚Äôs dozens, if not hundreds, of readymade source and sink connectors,&#xA;allowing you to create no-code data pipelines between all kinds of databases, APIs, and other systems.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;There may be situations though where there is no existing connector matching your requirements,&#xA;in which case you can &lt;a href=&#34;https://kafka.apache.org/documentation/#connect_development&#34;&gt;implement your own&lt;/a&gt; custom connector using the Kafka Connect framework.&#xA;Naturally, this raises the question of how to test such a Kafka connector,&#xA;making sure it propagates the data between the connected external system and Kafka correctly and completely.&#xA;In this blog post I‚Äôd like to focus on testing approaches for Kafka Connect &lt;em&gt;source&lt;/em&gt; connectors,&#xA;i.e. connectors like &lt;a href=&#34;https://debezium.io/&#34;&gt;Debezium&lt;/a&gt;, which ingest data from an external system into Kafka.&#xA;Very similar strategies can be employed for testing sink connectors, though.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Ten Tips to Make Conference Talks Suck Less</title>
      <link>https://www.morling.dev/blog/ten-tips-make-conference-talks-suck-less/</link>
      <pubDate>Thu, 23 Jun 2022 10:15:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/ten-tips-make-conference-talks-suck-less/</guid>
      <description>Every so often, I come across some conference talk which is highly interesting in terms of its actual contents, but which unfortunately is presented in a less than ideal way. I‚Äôm thinking of basic mistakes here, such as the presenter primarily looking at their slides rather than at the audience. I‚Äôm always feeling a bit sorry when this happens, as I firmly believe that everyone can do good and even great talks, just by being aware of‚Äâ‚Äî‚Äâand thus avoiding‚Äâ‚Äî‚Äâa few common mistakes, and sticking to some simple principles.</description>
    </item>
    <item>
      <title>Loom and Thread Fairness</title>
      <link>https://www.morling.dev/blog/loom-and-thread-fairness/</link>
      <pubDate>Fri, 27 May 2022 09:20:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/loom-and-thread-fairness/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;Update Jun 3: This post is discussed on &lt;a href=&#34;https://www.reddit.com/r/java/comments/v394uh/loom_and_thread_fairness/&#34;&gt;Reddit&lt;/a&gt; and &lt;a href=&#34;https://news.ycombinator.com/item?id=31600067&#34;&gt;Hacker News&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Project Loom (&lt;a href=&#34;https://openjdk.java.net/jeps/425&#34;&gt;JEP 425&lt;/a&gt;) is probably amongst the most awaited feature additions to Java ever;&#xA;its implementation of virtual threads (or &amp;#34;green threads&amp;#34;) promises developers the ability to create highly concurrent applications,&#xA;for instance with hundreds of thousands of open HTTP connections,&#xA;sticking to the well-known thread-per-request programming model,&#xA;without having to resort to less familiar and often more complex to use reactive approaches.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Having been in the workings for several years, Loom got merged into the mainline of OpenJDK &lt;a href=&#34;https://github.com/openjdk/jdk/commit/9583e3657e43cc1c6f2101a64534564db2a9bd84&#34;&gt;just recently&lt;/a&gt; and is available as a preview feature in the latest &lt;a href=&#34;https://jdk.java.net/19/&#34;&gt;Java 19 early access builds&lt;/a&gt;.&#xA;I.e. it‚Äôs the perfect time to get your hands onto virtual threads and explore the new feature.&#xA;In this post I‚Äôm going to share an interesting aspect I learned about thread scheduling fairness for CPU-bound workloads running on Loom.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Running JDK Mission Control on Apple M1</title>
      <link>https://www.morling.dev/blog/running-jmc-on-apple-m1/</link>
      <pubDate>Tue, 17 May 2022 09:20:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/running-jmc-on-apple-m1/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://jdk.java.net/jmc/8/&#34;&gt;JDK Mission Control&lt;/a&gt; (JMC) is invaluable for analysing performance data recording using &lt;a href=&#34;https://openjdk.java.net/jeps/328&#34;&gt;JDK Flight Recorder&lt;/a&gt; (JFR).&#xA;The other day, I ran into a problem when trying to run JMC on my Mac Mini M1.&#xA;Mostly for my own reference, here‚Äôs what I did to overcome it.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>The Code Review Pyramid</title>
      <link>https://www.morling.dev/blog/the-code-review-pyramid/</link>
      <pubDate>Thu, 10 Mar 2022 16:45:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/the-code-review-pyramid/</guid>
      <description>When it comes to code reviews, it‚Äôs a common phenomenon that there is much focus and long-winded discussions around mundane aspects like code formatting and style, whereas important aspects (does the code change do what it is supposed to do, is it performant, is it backwards-compatible for existing clients, and many others) tend to get less attention.&#xA;To raise awareness for the issue and providing some guidance on aspects to focus on, I shared a small visual on Twitter the other day, which I called the &amp;#34;Code Review Pyramid&amp;#34;.</description>
    </item>
    <item>
      <title>The JDK Flight Recorder File Format</title>
      <link>https://www.morling.dev/blog/jdk-flight-recorder-file-format/</link>
      <pubDate>Sun, 20 Feb 2022 21:15:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/jdk-flight-recorder-file-format/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://openjdk.java.net/jeps/328&#34;&gt;JDK Flight Recorder&lt;/a&gt; (JFR) is one of Java‚Äôs secret weapons;&#xA;deeply integrated into the Hotspot VM, it‚Äôs a high-performance event collection framework,&#xA;which lets you collect metrics on runtime aspects like object allocation and garbage collection,&#xA;class loading, file and network I/O, and lock contention, do method profiling, and much more.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;JFR data is persisted in recording files&#xA;(since Java 14, also &lt;a href=&#34;https://openjdk.java.net/jeps/349&#34;&gt;&amp;#34;realtime&amp;#34; event streaming&lt;/a&gt; is supported),&#xA;which can be loaded for analysis into tools like JDK Mission Control (JMC),&#xA;or the &lt;em&gt;jfr&lt;/em&gt; utility coming with OpenJDK itself.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>What&#39;s in a Good Error Message?</title>
      <link>https://www.morling.dev/blog/whats-in-a-good-error-message/</link>
      <pubDate>Wed, 12 Jan 2022 19:20:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/whats-in-a-good-error-message/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;Update Jan 13: This post is &lt;a href=&#34;https://www.reddit.com/r/programming/comments/s2kcp7/whats_in_a_good_error_message/&#34;&gt;discussed on Reddit&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;Update Feb 7: This post is &lt;a href=&#34;https://news.ycombinator.com/item?id=30234572&#34;&gt;discussed on Hacker News&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;As software developers, we‚Äôve all come across those annoying, not-so-useful error messages when using some library or framework: &lt;em&gt;&amp;#34;Couldn‚Äôt parse config file&amp;#34;&lt;/em&gt;, &lt;em&gt;&amp;#34;Lacking permission for this operation&amp;#34;&lt;/em&gt;, etc.&#xA;Ok, ok, so &lt;em&gt;something&lt;/em&gt; went wrong apparently; but what exactly? What config file? Which permissions? And what should you do about it?&#xA;Error messages lacking this kind of information quickly create a feeling of frustration and helplessness.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;So what makes a good error message then?&#xA;To me, it boils down to three pieces of information which should be conveyed by an error message:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;em&gt;Context:&lt;/em&gt; What led to the error? What was the code trying to do when it failed?&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;em&gt;The error itself:&lt;/em&gt; What exactly failed?&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;em&gt;Mitigation:&lt;/em&gt; What needs to be done in order to overcome the error?&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Announcing the First Release of kcctl</title>
      <link>https://www.morling.dev/blog/announcing-first-release-of-kcctl/</link>
      <pubDate>Tue, 21 Dec 2021 17:48:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/announcing-first-release-of-kcctl/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;üß∏ &lt;em&gt;It‚Äôs Casey. Casey Cuddle.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;I am very happy to announce the first stable release of &lt;a href=&#34;https://github.com/kcctl/kcctl&#34;&gt;kcctl&lt;/a&gt;,&#xA;a modern and intuitive command line client for &lt;a href=&#34;https://kafka.apache.org/documentation/#connect&#34;&gt;Apache Kafka Connect&lt;/a&gt;!&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Forget about having to memorize and type the right REST API paths and curl flags;&#xA;with kcctl, managing your Kafka connectors is done via concise and logically structured commands,&#xA;modeled after the semantics of the kubectl tool known from Kubernetes.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Introducing the OSS Quickstart Archetype</title>
      <link>https://www.morling.dev/blog/introducing-oss-quickstart-archetype/</link>
      <pubDate>Thu, 02 Dec 2021 18:30:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/introducing-oss-quickstart-archetype/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;I am very happy to announce the availability of the &lt;a href=&#34;https://github.com/moditect/oss-quickstart&#34;&gt;OSS Quickstart Archetype&lt;/a&gt;!&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Part of the &lt;a href=&#34;https://github.com/moditect/&#34;&gt;ModiTect&lt;/a&gt; family of open-source projects,&#xA;this is a Maven archetype which makes it very easy to bootstrap new Maven-based open-source projects,&#xA;satisfying common requirements such as configuring plug-in versions, and adhering to best practices like auto-formatting the source code.&#xA;Think &lt;a href=&#34;https://maven.apache.org/archetypes/maven-archetype-quickstart/scm.html&#34;&gt;Maven Quickstart Archetype&lt;/a&gt; and friends, but more modern, complete, and opinionated.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>O Kafka, Where Art Thou?</title>
      <link>https://www.morling.dev/blog/kafka-where-art-thou/</link>
      <pubDate>Mon, 29 Nov 2021 18:55:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/kafka-where-art-thou/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The other day, I came across an &lt;a href=&#34;https://www.reddit.com/r/java/comments/r2z17a/has_any_one_attempted_to_write_logs_directly_to/&#34;&gt;interesting thread&lt;/a&gt; in the Java sub-reddit, with someone asking:&#xA;&amp;#34;Has anyone attempted to write logs directly to Kafka?&amp;#34;.&#xA;This triggered a number of thoughts and questions for myself,&#xA;in particular how one should deal in an application when an attempt to send messages to Kafka fails,&#xA;for instance due to some network connectivity issue?&#xA;What do you do when you cannot reach the Kafka broker?&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Refining The Return Type Of Java Methods Without Breaking Backwards-Compatibility</title>
      <link>https://www.morling.dev/blog/refining-return-type-java-methods-without-breaking-backwards-compatibility/</link>
      <pubDate>Mon, 22 Nov 2021 18:30:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/refining-return-type-java-methods-without-breaking-backwards-compatibility/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;If you work on any kind of software library,&#xA;ensuring backwards-compatibility is a key concern:&#xA;if there‚Äôs one thing which users really dislike, it is breaking changes in a new version of a library.&#xA;The rules of what can (and cannot) be changed in a Java API without breaking existing consumers are well defined in the Java language specification (JLS),&#xA;but things can get pretty interesting in certain corner cases.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The Eclipse team provides a &lt;a href=&#34;https://wiki.eclipse.org/Evolving_Java-based_APIs_2&#34;&gt;comprehensive overview&lt;/a&gt; about API evolution guidelines in their wiki.&#xA;When I shared the link to this great resource on Twitter the other day,&#xA;I received an &lt;a href=&#34;https://twitter.com/lukaseder/status/1462358911072317440&#34;&gt;interesting reply&lt;/a&gt; from Lukas Eder:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;quoteblock&#34;&gt;&#xA;&lt;blockquote&gt;&#xA;I wish Java had a few tools to prevent some cases of binary compatibility breakages. E.g. when refining a method return type, I‚Äôd like to keep the old method around in byte code (but not in source code).&#xA;&lt;br/&gt;&#xA;&lt;br/&gt;&#xA;I think kotlin has such tools?&#xA;&lt;/blockquote&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;In the remainder of this post,&#xA;I‚Äôd like to provide some more insight into that problem mentioned by Lukas,&#xA;and how it can be addressed using an open-source tool called &lt;a href=&#34;https://github.com/dmlloyd/bridger&#34;&gt;Bridger&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>JDK Flight Recorder Events in GraalVM Native Binaries</title>
      <link>https://www.morling.dev/blog/jfr-events-in-graalvm-native-binaries/</link>
      <pubDate>Fri, 12 Nov 2021 18:30:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/jfr-events-in-graalvm-native-binaries/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;If you have followed this blog for a while,&#xA;you‚Äôll know that I am a big fan of &lt;a href=&#34;https://openjdk.java.net/jeps/328&#34;&gt;JDK Flight Recorder&lt;/a&gt; (JFR),&#xA;the low-overhead diagnostics and profiling framework built into the HotSpot Java virtual machine.&#xA;And indeed, until recently, this meant &lt;em&gt;only&lt;/em&gt; HotSpot:&#xA;Folks compiling their Java applications into &lt;a href=&#34;https://www.graalvm.org/reference-manual/native-image/&#34;&gt;GraalVM native binaries&lt;/a&gt; could not benefit from all the JFR goodness so far.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Debezium and Friends ‚Äì Conference Talks 2021</title>
      <link>https://www.morling.dev/blog/debezium-talks-2021/</link>
      <pubDate>Tue, 02 Nov 2021 10:50:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/debezium-talks-2021/</guid>
      <description>If you love to attend conferences around the world without actually leaving the comfort of your house, 2021 certainly was (and is!) a perfect year for you. Tons of online conferences, many of them available for free, are hosting talks on all kinds of topics, and virtual conference platforms are getting better, too.&#xA;As the year is slowly reaching its end, I thought it might be nice to do a quick recap and gather in one place all the talks on Debezium and change data capture (CDC) which I did in 2021.</description>
    </item>
    <item>
      <title>What&#39;s on My Desk?</title>
      <link>https://www.morling.dev/blog/whats-on-my-desk/</link>
      <pubDate>Sun, 24 Oct 2021 10:30:00 +0200</pubDate>
      <guid>https://www.morling.dev/blog/whats-on-my-desk/</guid>
      <description>&lt;div class=&#34;imageblock&#34;&gt;&#xA;&lt;div class=&#34;content&#34;&gt;&#xA;&lt;img src=&#34;https://www.morling.dev/images/desk_complete.jpg&#34; alt=&#34;desk complete&#34;/&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;I‚Äôve been working from home exclusively for the last nine years,&#xA;but it was only last year that I started to look into ways for expanding my computer set-up and go beyond the usual combination of having a laptop with your regular external screen.&#xA;The global COVID-19 pandemic, the prospect of having more calls with colleagues than ever (no physical meetings), and the constantly increasing need for recording talks for online conferences and meet-ups made me reevaluate things and steadily improve and fine tune my set-up, in particular in regards to better video and audio quality.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Executable JavaDoc Code Snippets</title>
      <link>https://www.morling.dev/blog/executable-javadoc-code-snippets/</link>
      <pubDate>Mon, 18 Oct 2021 08:30:00 +0200</pubDate>
      <guid>https://www.morling.dev/blog/executable-javadoc-code-snippets/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;It has been just a few weeks since the &lt;a href=&#34;https://www.infoq.com/news/2021/09/java17-released/&#34;&gt;release of Java 17&lt;/a&gt;, but the first changes scheduled for Java 18 begin to show up in early access builds.&#xA;One feature in particular that excites me as a maintainer of different Java libraries is &lt;a href=&#34;https://openjdk.java.net/jeps/413&#34;&gt;JEP 413&lt;/a&gt; (&amp;#34;Code Snippets in Java API Documentation&amp;#34;).&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Resource Bundle Look-ups in Modular Java Applications</title>
      <link>https://www.morling.dev/blog/resource-bundle-lookups-in-modular-java-applications/</link>
      <pubDate>Sun, 29 Aug 2021 18:30:00 +0200</pubDate>
      <guid>https://www.morling.dev/blog/resource-bundle-lookups-in-modular-java-applications/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ResourceBundle.html&#34;&gt;&lt;code&gt;ResourceBundle&lt;/code&gt;&lt;/a&gt; class is Java‚Äôs workhorse for managing and retrieving locale specific resources,&#xA;such as error messages of internationalized applications.&#xA;With the advent of the module system in Java 9, specifics around discovering and loading resource bundles have changed quite a bit, in particular when it comes to retrieving resource bundles across the boundaries of named modules.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;In this blog post I‚Äôd like to discuss how resource bundles can be used in a multi-module application&#xA;(i.e. a &amp;#34;modular monolith&amp;#34;) for internationalizing error messages.&#xA;The following requirements should be satisified:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Introducing JfrUnit 1.0.0.Alpha1</title>
      <link>https://www.morling.dev/blog/introducing-jfrunit-1-0-0-alpha1/</link>
      <pubDate>Wed, 04 Aug 2021 19:10:00 +0200</pubDate>
      <guid>https://www.morling.dev/blog/introducing-jfrunit-1-0-0-alpha1/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;Unit testing, for performance&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;It‚Äôs with great pleasure that I‚Äôm announcing the first official release of JfrUnit today!&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/moditect/jfrunit&#34;&gt;JfrUnit&lt;/a&gt; is an extension to JUnit which allows you to assert &lt;a href=&#34;https://openjdk.java.net/jeps/328&#34;&gt;JDK Flight Recorder&lt;/a&gt; events in your unit tests.&#xA;This capability opens up a number of interesting use cases in the field of testing JVM-based applications:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;You can use JfrUnit to ensure your application produces the &lt;a href=&#34;blog/rest-api-monitoring-with-custom-jdk-flight-recorder-events/&#34;&gt;custom JFR events&lt;/a&gt; you expect it to emit&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;You can use JfrUnit to identify potential performance regressions of your application by means of tracking JFR events e.g. for garbage collection, memory allocation and network I/O&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;You can use JfrUnit together with &lt;a href=&#34;https://wiki.openjdk.java.net/display/jmc/The+JMC+Agent&#34;&gt;JMC Agent&lt;/a&gt; for whitebox tests of your application, ensuring specific methods are invoked with the expected parameters and return values&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Three Plus Some Lovely Kafka Trends</title>
      <link>https://www.morling.dev/blog/three-plus-some-lovely-kafka-trends/</link>
      <pubDate>Fri, 28 May 2021 10:30:00 +0200</pubDate>
      <guid>https://www.morling.dev/blog/three-plus-some-lovely-kafka-trends/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Over the course of the last few months, I‚Äôve had the pleasure to serve on the &lt;a href=&#34;https://www.kafka-summit.org/&#34;&gt;Kafka Summit&lt;/a&gt; program committee and review several hundred session abstracts for the three Summits happening this year (Europe, APAC, Americas).&#xA;That‚Äôs not only a big honour, but also a unique opportunity to learn what excites people currently in the Kafka eco-system&#xA;(and yes, it‚Äôs a fair amount of work, too ;).&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;While voting on the proposals, and also generally aspiring to stay informed of what‚Äôs going on in the Kafka community at large, I noticed a few repeating themes and topics which I thought would be interesting to share&#xA;(without touching on any specific talks of course).&#xA;At first I meant to put this out via a Twitter thread, but then it became a bit too long for that, so I decided to write this quick blog post instead.&#xA;Here it goes!&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Exploring ZooKeeper-less Kafka</title>
      <link>https://www.morling.dev/blog/exploring-zookeeper-less-kafka/</link>
      <pubDate>Mon, 17 May 2021 18:45:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/exploring-zookeeper-less-kafka/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Sometimes, less is more.&#xA;One case where that‚Äôs certainly true is dependencies.&#xA;And so it shouldn‚Äôt come at a surprise that the &lt;a href=&#34;https://kafka.apache.org/&#34;&gt;Apache Kafka&lt;/a&gt; community is eagerly awaiting the removal of the dependency to the &lt;a href=&#34;https://zookeeper.apache.org/&#34;&gt;ZooKeeper&lt;/a&gt; service,&#xA;which currently is used for storing Kafka metadata (e.g. about topics and partitions) as well as for the purposes of leader election in the cluster.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The Kafka improvement proposal &lt;a href=&#34;https://cwiki.apache.org/confluence/display/KAFKA/KIP-500%3A+Replace+ZooKeeper+with+a+Self-Managed+Metadata+Quorum&#34;&gt;KIP-500&lt;/a&gt;&#xA;(&amp;#34;Replace ZooKeeper with a Self-Managed Metadata Quorum&amp;#34;)&#xA;promises to make life better for users in many regards:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Better getting started and operational experience by requiring to run only one system, Kafka, instead of two&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Removing potential for discrepancies of metadata state between ZooKeeper and the Kafka controller&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Simplifying configuration, for instance when it comes to security&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Better scalability, e.g. in terms of number of partitions; faster execution of operations like topic creation&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>The Anatomy of ct.sym ‚Äî How javac Ensures Backwards Compatibility</title>
      <link>https://www.morling.dev/blog/the-anatomy-of-ct-sym-how-javac-ensures-backwards-compatibility/</link>
      <pubDate>Mon, 26 Apr 2021 18:45:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/the-anatomy-of-ct-sym-how-javac-ensures-backwards-compatibility/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;One of the ultimate strengths of Java is its strong notion of backwards compatibility:&#xA;Java applications and libraries built many years ago oftentimes run without problems on current JVMs,&#xA;and the compiler of current JDKs can produce byte code, that is executable with earlier Java versions.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;For instance, JDK 16 supports byte code levels going back as far as to Java 1.7;&#xA;But: &lt;em&gt;hic sunt dracones&lt;/em&gt;.&#xA;The emitted byte code level is just one part of the story.&#xA;It‚Äôs equally important to consider which APIs of the JDK are used by the compiled code,&#xA;and whether they are available in the targeted Java runtime version.&#xA;As an example, let‚Äôs consider this simple &amp;#34;Hello World&amp;#34; program:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>FizzBuzz ‚Äì SIMD Style!</title>
      <link>https://www.morling.dev/blog/fizzbuzz-simd-style/</link>
      <pubDate>Mon, 08 Mar 2021 16:25:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/fizzbuzz-simd-style/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Java 16 is around the corner, so there‚Äôs no better time than now for learning more about the features which the new version will bring.&#xA;After exploring the support for &lt;a href=&#34;https://www.morling.dev/blog/talking-to-postgres-through-java-16-unix-domain-socket-channels/&#34;&gt;Unix domain sockets&lt;/a&gt; a while ago,&#xA;I‚Äôve lately been really curious about the incubating Vector API,&#xA;as defined by &lt;a href=&#34;https://openjdk.java.net/jeps/338&#34;&gt;JEP 338&lt;/a&gt;,&#xA;developed under the umbrella of &lt;a href=&#34;https://openjdk.java.net/projects/panama/&#34;&gt;Project Panama&lt;/a&gt;,&#xA;which aims at &amp;#34;interconnecting JVM and native code&amp;#34;.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;Vectors?!?&lt;/em&gt;&#xA;Of course this is not about renewing the ancient Java collection types like &lt;code&gt;java.util.Vector&lt;/code&gt;&#xA;(&amp;lt;insert some pun about this here&amp;gt;),&#xA;but rather about an API which lets Java developers take advantage of the vector calculation capabilities you can find in most CPUs these days.&#xA;Now I‚Äôm by no means an expert on low-level programming leveraging specific CPU instructions,&#xA;but exactly that‚Äôs why I hope to make the case with this post that the new Vector API makes these capabilities approachable to a wide audience of Java programmers.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Talking to Postgres Through Java 16 Unix-Domain Socket Channels</title>
      <link>https://www.morling.dev/blog/talking-to-postgres-through-java-16-unix-domain-socket-channels/</link>
      <pubDate>Sun, 31 Jan 2021 20:25:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/talking-to-postgres-through-java-16-unix-domain-socket-channels/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;Update Feb 5: This post is &lt;a href=&#34;https://news.ycombinator.com/item?id=26012466&#34;&gt;discussed on Hacker News&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Reading a blog post about what‚Äôs &lt;a href=&#34;https://www.loicmathieu.fr/wordpress/en/informatique/java-16-quoi-de-neuf/&#34;&gt;coming up in JDK 16&lt;/a&gt; recently,&#xA;I learned that one of the new features is support for Unix domain sockets (&lt;a href=&#34;https://openjdk.java.net/jeps/380&#34;&gt;JEP 380&lt;/a&gt;).&#xA;Before Java 16, you‚Äôd have to resort to 3rd party libraries like &lt;a href=&#34;https://github.com/jnr/jnr-unixsocket&#34;&gt;jnr-unixsocket&lt;/a&gt; in order to use them.&#xA;If you haven‚Äôt heard about &lt;a href=&#34;https://en.wikipedia.org/wiki/Unix_domain_socket&#34;&gt;Unix domain sockets&lt;/a&gt; before,&#xA;they are &amp;#34;data communications [endpoints] for exchanging data between processes executing on the same host operating system&amp;#34;.&#xA;Don‚Äôt be put off by the name btw.;&#xA;Unix domain sockets are also supported by macOS and even Windows since &lt;a href=&#34;https://devblogs.microsoft.com/commandline/af_unix-comes-to-windows/&#34;&gt;version 10&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>jlink&#39;s Missing Link: API Signature Validation</title>
      <link>https://www.morling.dev/blog/jlinks-missing-link-api-signature-validation/</link>
      <pubDate>Mon, 28 Dec 2020 12:20:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/jlinks-missing-link-api-signature-validation/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Discussions around Java‚Äôs &lt;a href=&#34;https://openjdk.java.net/jeps/282&#34;&gt;jlink&lt;/a&gt; tool typically center around savings in terms of (disk) space.&#xA;Instead of shipping an entire JDK,&#xA;a custom runtime image created with jlink contains only those JDK modules which an application actually requires,&#xA;resulting in smaller distributables and &lt;a href=&#34;blog/smaller-faster-starting-container-images-with-jlink-and-appcds/&#34;&gt;container images&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;But the contribution of jlink‚Äâ‚Äî‚Äâas a part of the Java module system at large‚Äâ‚Äî‚Äâto the development of Java application‚Äôs is bigger than that:&#xA;with the notion of &lt;em&gt;link time&lt;/em&gt; it defines an optional complement to the well known phases &lt;em&gt;compile time&lt;/em&gt; and application &lt;em&gt;run-time&lt;/em&gt;:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;quoteblock&#34;&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Link time is an opportunity to do whole-world optimizations that are otherwise difficult at compile time or costly at run-time. An example would be to optimize a computation when all its inputs become constant (i.e., not unknown). A follow-up optimization would be to remove code that is no longer reachable.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>ByteBuffer and the Dreaded NoSuchMethodError</title>
      <link>https://www.morling.dev/blog/bytebuffer-and-the-dreaded-nosuchmethoderror/</link>
      <pubDate>Mon, 21 Dec 2020 17:45:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/bytebuffer-and-the-dreaded-nosuchmethoderror/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The other day, a user in the &lt;a href=&#34;https://debezium.io/&#34;&gt;Debezium&lt;/a&gt; community reported an interesting issue;&#xA;They were using Debezium with Java 1.8 and got an odd &lt;code&gt;NoSuchMethodError&lt;/code&gt;:&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Towards Continuous Performance Regression Testing</title>
      <link>https://www.morling.dev/blog/towards-continuous-performance-regression-testing/</link>
      <pubDate>Wed, 16 Dec 2020 17:45:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/towards-continuous-performance-regression-testing/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Functional unit and integration tests are a standard tool of any software development organization,&#xA;helping not only to ensure correctness of newly implemented code,&#xA;but also to identify regressions‚Äâ‚Äî‚Äâbugs in existing functionality introduced by a code change.&#xA;The situation looks different though when it comes to regressions related to non-functional requirements, in particular performance-related ones:&#xA;How to detect increased response times in a web application?&#xA;How to identify decreased throughput?&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;These aspects are typically hard to test in an automated and reliable way in the development workflow,&#xA;as they are dependent on the underlying hardware and the workload of an application.&#xA;For instance assertions on the duration of specific requests of a web application typically cannot be run in a meaningful way on a developer laptop,&#xA;which differs from the actual production hardware&#xA;(ironically, nowadays both is an option, the developer laptop being less or more powerful than the actual production environment).&#xA;When run in a virtualized or containerized CI environment, such tests are prone to severe measurement distortions due to concurrent load of other applications and jobs.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;This post introduces the &lt;a href=&#34;https://github.com/gunnarmorling/jfrunit&#34;&gt;JfrUnit&lt;/a&gt; open-source project, which offers a fresh angle to this topic by supporting assertions not on metrics like latency/throughput themselves, but on &lt;em&gt;indirect metrics&lt;/em&gt; which may impact those.&#xA;JfrUnit allows you define expected values for metrics such as memory allocation, database I/O, or number of executed SQL statements, for a given workload and asserts the actual metrics values‚Äâ‚Äî‚Äâwhich are obtained from &lt;a href=&#34;https://openjdk.java.net/jeps/328&#34;&gt;JDK Flight Recorder&lt;/a&gt; events‚Äâ‚Äî‚Äâagainst these expected values.&#xA;Starting off from a defined base line, future failures of such assertions are an indicator for potential performance regressions in an application, as a code change may have introduced higher GC pressure,&#xA;the retrieval of unneccessary data from the database, or SQL problems commonly induced by ORM tools, like N+1 SELECT statements.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Smaller, Faster-starting Container Images With jlink and AppCDS</title>
      <link>https://www.morling.dev/blog/smaller-faster-starting-container-images-with-jlink-and-appcds/</link>
      <pubDate>Sun, 13 Dec 2020 20:30:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/smaller-faster-starting-container-images-with-jlink-and-appcds/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;A few months ago I &lt;a href=&#34;https://www.morling.dev/blog/building-class-data-sharing-archives-with-apache-maven/&#34;&gt;wrote about&lt;/a&gt; how you could speed up your Java application‚Äôs start-up times using application class data sharing (&lt;a href=&#34;http://openjdk.java.net/jeps/350&#34;&gt;AppCDS&lt;/a&gt;),&#xA;based on the example of a simple &lt;a href=&#34;https://quarkus.io/&#34;&gt;Quarkus&lt;/a&gt; application.&#xA;Since then, quite some progress has been made in this area:&#xA;Quarkus 1.6 brought &lt;a href=&#34;https://quarkus.io/guides/maven-tooling#quarkus-package-pkg-package-config_quarkus.package.create-appcds&#34;&gt;built-in support for AppCDS&lt;/a&gt;,&#xA;so that now you just need to provide the &lt;em&gt;-Dquarkus.package.create-appcds=true&lt;/em&gt; option when building your project,&#xA;and you‚Äôll find an AppCDS file in the &lt;em&gt;target&lt;/em&gt; folder.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Things get more challenging though when combining AppCDS with custom Java runtime images,&#xA;as produced using the &lt;a href=&#34;https://docs.oracle.com/en/java/javase/15/docs/specs/man/jlink.html&#34;&gt;jlink&lt;/a&gt; tool added in Java 9.&#xA;Combining custom runtime images with AppCDS is very attractive,&#xA;in particular when looking at the deployment of Java applications via Linux containers.&#xA;Instead of putting the full Java runtime into the container image, you only add those JDK modules which your application actually requires.&#xA;(Parts of) what you save in image size by doing so,&#xA;can be used for adding an AppCDS archive to your container image.&#xA;The result will be a container image which still is smaller than before‚Äâ‚Äî‚Äâand thus is faster to push to a container registry, distribute to worker nodes in a Kubernetes cluster, etc.‚Äâ‚Äî‚Äâand which starts up significantly faster.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Quarkus and Testcontainers</title>
      <link>https://www.morling.dev/blog/quarkus-and-testcontainers/</link>
      <pubDate>Sat, 28 Nov 2020 17:45:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/quarkus-and-testcontainers/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://www.testcontainers.org/&#34;&gt;Testcontainers&lt;/a&gt; project is invaluable for spinning up containerized resources during your (JUnit) tests,&#xA;e.g. databases or Kafka clusters.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;For users of JUnit 5, the project provides the &lt;a href=&#34;https://www.testcontainers.org/quickstart/junit_5_quickstart/&#34;&gt;&lt;code&gt;@Testcontainers&lt;/code&gt;&lt;/a&gt; extension, which controls the lifecycle of containers used by a test.&#xA;When testing a &lt;a href=&#34;https://quarkus.io/&#34;&gt;Quarkus&lt;/a&gt; application though, this is at odds with Quarkus&amp;#39; own &lt;a href=&#34;https://quarkus.io/guides/getting-started-testing#recap-of-http-based-testing-in-jvm-mode&#34;&gt;&lt;code&gt;@QuarkusTest&lt;/code&gt;&lt;/a&gt; extension;&#xA;it‚Äôs a recommended &lt;a href=&#34;https://bsideup.github.io/posts/testcontainers_fixed_ports/&#34;&gt;best practice&lt;/a&gt; to avoid fixed ports for any containers started by Testcontainers.&#xA;Instead, you should rely on Docker to automatically allocate random free ports.&#xA;This avoids conflicts between concurrently running tests,&#xA;e.g. amongst multiple Postgres containers,&#xA;started up by several parallel job runs in a CI environment, all trying to allocate Postgres&amp;#39; default port 5432.&#xA;Obtaining the randomly assigned port and passing it into the Quarkus bootstrap process isn‚Äôt possible though when combining the two JUnit extensions.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Class Unloading in Layered Java Applications</title>
      <link>https://www.morling.dev/blog/class-unloading-in-layered-java-applications/</link>
      <pubDate>Wed, 14 Oct 2020 17:45:00 +0200</pubDate>
      <guid>https://www.morling.dev/blog/class-unloading-in-layered-java-applications/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Layers are sort of the secret sauce of the Java platform module system (JPMS):&#xA;by providing fine-grained control over how individual JPMS modules and their classes are loaded by the JVM,&#xA;they enable advanced usages like loading multiple versions of a given module, or dynamically adding and removing modules at application runtime.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://www.morling.dev/blog/introducing-layrry-runner-and-api-for-modularized-java-applications/&#34;&gt;Layrry&lt;/a&gt; API and launcher provides a small plug-in API based on top of layers,&#xA;which for instance can be used to dynamically add plug-ins contributing new views and widgets to a running JavaFX application.&#xA;If such plug-in gets removed from the application again,&#xA;all its classes need to be unloaded by the JVM, avoiding an ever-increasing memory consumption if for instance a plug-in gets updated multiple times.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;In this blog post I‚Äôm going to explore how to ensure classes from removed plug-in layers are unloaded in a timely manner,&#xA;and how to find the culprit in case some class fails to be unloaded.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building hsdis for OpenJDK 15</title>
      <link>https://www.morling.dev/blog/building-hsdis-for-openjdk-15/</link>
      <pubDate>Mon, 05 Oct 2020 20:30:00 +0200</pubDate>
      <guid>https://www.morling.dev/blog/building-hsdis-for-openjdk-15/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Lately I‚Äôve been fascinated by the possibility to analyse the assembly code emitted by the Java JIT (just-in-time) compiler.&#xA;So far I had only looked only into Java class files using &lt;em&gt;javap&lt;/em&gt;;&#xA;diving into the world of assembly code feels a bit like Alice must have felt when falling down the rabbit whole into wonderland.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Introducing JmFrX: A Bridge From JMX to JDK Flight Recorder</title>
      <link>https://www.morling.dev/blog/introducing-jmfrx-a-bridge-from-jmx-to-jdk-flight-recorder/</link>
      <pubDate>Tue, 18 Aug 2020 17:30:00 +0200</pubDate>
      <guid>https://www.morling.dev/blog/introducing-jmfrx-a-bridge-from-jmx-to-jdk-flight-recorder/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;I‚Äôm excited to share the news about an open-source utility I‚Äôve been working on lately:&#xA;&lt;a href=&#34;https://github.com/gunnarmorling/jmfrx&#34;&gt;JmFrX&lt;/a&gt;,&#xA;a tool for capturing JMX data with JDK Flight Recorder.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;When using JMX (&lt;a href=&#34;https://en.wikipedia.org/wiki/Java_Management_Extensions&#34;&gt;Java Management Extensions&lt;/a&gt;), The Java platform‚Äôs standard for monitoring and managing applications,&#xA;JmFrX allows you to periodically record the attributes from any JMX MBean into &lt;a href=&#34;https://openjdk.java.net/jeps/328&#34;&gt;JDK Flight Recorder&lt;/a&gt; (JFR) files,&#xA;which you then can analyse using &lt;a href=&#34;https://openjdk.java.net/projects/jmc/&#34;&gt;JDK Mission Control&lt;/a&gt; (JMC).&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>How I Built a Serverless Search for My Blog</title>
      <link>https://www.morling.dev/blog/how-i-built-a-serverless-search-for-my-blog/</link>
      <pubDate>Wed, 29 Jul 2020 17:30:00 +0200</pubDate>
      <guid>https://www.morling.dev/blog/how-i-built-a-serverless-search-for-my-blog/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;&lt;em&gt;I have built a custom search functionality for this blog,&#xA;based on Java and the Apache Lucene full-text search library,&#xA;compiled into a native binary using the Quarkus framework and GraalVM.&#xA;It is deployed as a Serverless application running on AWS Lambda,&#xA;providing search results without any significant cold start delay.&#xA;If you thought Java wouldn‚Äôt be the right language for this job, keep reading;&#xA;in this post I‚Äôm going to give an overview over the implementation of this feature and my learnings along the way.&lt;/em&gt;&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Building Class Data Sharing Archives with Apache Maven</title>
      <link>https://www.morling.dev/blog/building-class-data-sharing-archives-with-apache-maven/</link>
      <pubDate>Thu, 11 Jun 2020 17:30:00 +0200</pubDate>
      <guid>https://www.morling.dev/blog/building-class-data-sharing-archives-with-apache-maven/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Ahead-of-time compilation (AOT) is &lt;em&gt;the&lt;/em&gt; big topic in the Java ecosystem lately:&#xA;by compiling Java code to native binaries, developers and users benefit from vastly improved start-up times and reduced memory usage.&#xA;The &lt;a href=&#34;https://www.graalvm.org/&#34;&gt;GraalVM&lt;/a&gt; project made huge progress towards AOT-compiled Java applications,&#xA;and &lt;a href=&#34;https://mail.openjdk.java.net/pipermail/discuss/2020-April/005429.html&#34;&gt;Project Leyden&lt;/a&gt; promises to standardize AOT in a future version of the Java platform.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;This makes it easy to miss out on significant performance improvements which have been made on the JVM in recent Java versions,&#xA;in particular when it comes to &lt;a href=&#34;https://cl4es.github.io/2019/11/20/OpenJDK-Startup-Update.html&#34;&gt;faster start-up times&lt;/a&gt;.&#xA;Besides a range of improvements related to class loading, linking and bytecode verification,&#xA;substantial work has been done around &lt;a href=&#34;https://docs.oracle.com/en/java/javase/14/vm/class-data-sharing.html&#34;&gt;class data sharing&lt;/a&gt; (CDS).&#xA;Faster start-ups are beneficial in many ways:&#xA;shorter turnaround times during development,&#xA;quicker time-to-first-response for users in coldstart scenarios,&#xA;cost savings when billed by CPU time in the cloud.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;With CDS, class metadata is persisted in an archive file,&#xA;which during subsequent application starts is mapped into memory.&#xA;This is faster than loading the actual class files, resulting in reduced start-up times.&#xA;When starting multiple JVM processes on the same host, read-only archives of class metadata can also be shared between the VMs, so that less memory is consumed overall.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Single Message Transformations - The Swiss Army Knife of Kafka Connect</title>
      <link>https://www.morling.dev/blog/single-message-transforms-swiss-army-knife-of-kafka-connect/</link>
      <pubDate>Thu, 14 May 2020 15:30:00 +0200</pubDate>
      <guid>https://www.morling.dev/blog/single-message-transforms-swiss-army-knife-of-kafka-connect/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Do you remember Angus &amp;#34;Mac&amp;#34; MacGyver?&#xA;The always creative protagonist of the popular 80ies/90ies TV show, who could solve about any problem with nothing more than a Swiss Army knife, duct tape, shoe strings and a paper clip?&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The single message transformations (SMTs) of Kafka Connect are almost as versatile as MacGyver‚Äôs Swiss Army knife:&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;ulist&#34;&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;How to change the timezone or format of date/time message fields?&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;How to change the topic a specific message gets sent to?&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;How to filter out specific records?&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;SMTs can be the answer to these and many other questions that come up in the context of Kafka Connect.&#xA;Applied to source or sink connectors,&#xA;SMTs allow to modify Kafka records before they are sent to Kafka, or after they are consumed from a topic, respectively.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>The Emitter Parameter Pattern for Flexible SPI Contracts</title>
      <link>https://www.morling.dev/blog/emitter-parameter-pattern-for-flexible-spis/</link>
      <pubDate>Mon, 04 May 2020 17:30:00 +0200</pubDate>
      <guid>https://www.morling.dev/blog/emitter-parameter-pattern-for-flexible-spis/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;For libraries and frameworks it‚Äôs a common requirement to make specific aspects customizeable via &lt;a href=&#34;https://en.wikipedia.org/wiki/Service_provider_interface&#34;&gt;service provider interfaces&lt;/a&gt; (SPIs):&#xA;contracts to be implemented by the application developer, which then are invoked by framework code,&#xA;adding new or replacing existing functionality.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Often times, the method implementations of such an SPI need to return value(s) to the framework.&#xA;An alternative to return values are &amp;#34;emitter parameters&amp;#34;:&#xA;passed by the framework to the SPI method, they offer an &lt;em&gt;API&lt;/em&gt; for receiving value(s) via method calls.&#xA;Certainly not revolutionary or even a new idea,&#xA;I find myself using emitter parameters more and more in libraries and frameworks I work on.&#xA;Hence I‚Äôd like to discuss some advantages I perceive about the emitter parameter pattern.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Plug-in Architectures With Layrry and the Java Module System</title>
      <link>https://www.morling.dev/blog/plugin-architectures-with-layrry-and-the-java-module-system/</link>
      <pubDate>Tue, 21 Apr 2020 18:54:00 +0200</pubDate>
      <guid>https://www.morling.dev/blog/plugin-architectures-with-layrry-and-the-java-module-system/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Making applications extensible with some form of plug-ins is a very common pattern in software design:&#xA;based on well-defined APIs provided by the application core, plug-ins can customize an application‚Äôs behavior and provide new functionality.&#xA;Examples include desktop applications like IDEs or web browsers, build tools such as Apache Maven or Gradle, as well as server-side applications such as Apache Kafka Connect,&#xA;a runtime for Kafka connectors plug-ins.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;In this post I‚Äôm going to explore how the &lt;a href=&#34;https://www.jcp.org/en/jsr/detail?id=376&#34;&gt;Java Platform Module System&lt;/a&gt;&amp;#39;s notion of module layers can be leveraged for implementing plug-in architectures on the JVM.&#xA;We‚Äôll also discuss how &lt;a href=&#34;https://github.com/moditect/layrry&#34;&gt;Layrry&lt;/a&gt;, a launcher and runtime for layered Java applications, can help with this task.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Introducing Layrry: A Launcher and API for Modularized Java Applications</title>
      <link>https://www.morling.dev/blog/introducing-layrry-runner-and-api-for-modularized-java-applications/</link>
      <pubDate>Sun, 29 Mar 2020 21:31:00 +0200</pubDate>
      <guid>https://www.morling.dev/blog/introducing-layrry-runner-and-api-for-modularized-java-applications/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;One of the biggest changes in recent Java versions has been the introduction of the &lt;a href=&#34;http://openjdk.java.net/projects/jigsaw/spec/&#34;&gt;module system&lt;/a&gt; in Java 9.&#xA;It allows to organize Java applications and their dependencies in strongly encapsulated modules, utilizing explicit and well-defined module APIs and relationships.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;In this post I‚Äôm going to introduce the &lt;a href=&#34;https://github.com/moditect/layrry&#34;&gt;Layrry&lt;/a&gt; open-source project, a launcher and Java API for executing modularized Java applications.&#xA;Layrry helps Java developers to assemble modularized applications from dependencies using their Maven coordinates and execute them using module layers.&#xA;Layers go beyond the capabilities of the &amp;#34;flat&amp;#34; module path specified via the &lt;em&gt;--module-path&lt;/em&gt; parameter of the &lt;em&gt;java&lt;/em&gt; command,&#xA;e.g. allowing to use multiple versions of one module within one and the same application.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Reworking Git Branches with git filter-branch</title>
      <link>https://www.morling.dev/blog/reworking-git-branches-with-git-filter-branch/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:10 +0100</pubDate>
      <guid>https://www.morling.dev/blog/reworking-git-branches-with-git-filter-branch/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;Within &lt;a href=&#34;https://debezium.io/&#34;&gt;Debezium&lt;/a&gt;, the project I‚Äôm working on at Red Hat, we recently encountered an &amp;#34;interesting&amp;#34; situation where we had to resolve a rather difficult merge conflict.&#xA;As others where interested in how we addressed the issue, and also for our own future reference,&#xA;I‚Äôm going to give a quick run down of the problem we encountered and how we solved it.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Monitoring REST APIs with Custom JDK Flight Recorder Events</title>
      <link>https://www.morling.dev/blog/rest-api-monitoring-with-custom-jdk-flight-recorder-events/</link>
      <pubDate>Wed, 29 Jan 2020 15:30:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/rest-api-monitoring-with-custom-jdk-flight-recorder-events/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;The &lt;a href=&#34;https://openjdk.java.net/jeps/328&#34;&gt;JDK Flight Recorder&lt;/a&gt; (JFR) is an invaluable tool for gaining deep insights into the performance characteristics of Java applications.&#xA;Open-sourced in JDK 11, JFR provides a low-overhead framework for collecting events from Java applications, the JVM and the operating system.&lt;/p&gt;&#xA;&lt;/div&gt;&#xA;&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;In this blog post we‚Äôre going to explore how custom, application-specific JFR events can be used to monitor a REST API, allowing to track request counts, identify long-running requests and more.&#xA;We‚Äôll also discuss how the JFR &lt;a href=&#34;https://openjdk.java.net/jeps/349&#34;&gt;Event Streaming API&lt;/a&gt; new in Java 14 can be used to export live events,&#xA;making them available for monitoring and alerting via tools such as Prometheus and Grafana.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Enforcing Java Record Invariants With Bean Validation</title>
      <link>https://www.morling.dev/blog/enforcing-java-record-invariants-with-bean-validation/</link>
      <pubDate>Mon, 20 Jan 2020 17:30:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/enforcing-java-record-invariants-with-bean-validation/</guid>
      <description>Record types are one of the most awaited features in Java 14; they promise to &amp;#34;provide a compact syntax for declaring classes which are transparent holders for shallowly immutable data&amp;#34;. One example where records should be beneficial are data transfer objects (DTOs), as e.g. found in the remoting layer of enterprise applications. Typically, certain rules should be applied to the attributes of such DTO, e.g. in terms of allowed values.</description>
    </item>
    <item>
      <title>Using Java 13 Text Blocks (Only) for Your Tests</title>
      <link>https://www.morling.dev/blog/using-java-13-text-blocks-for-tests/</link>
      <pubDate>Mon, 13 Jan 2020 17:30:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/using-java-13-text-blocks-for-tests/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;When Java 9 was introduced in 2017,&#xA;it was the last major version published under the old release scheme.&#xA;Since then, a &lt;a href=&#34;https://www.infoq.com/news/2017/09/Java6Month/&#34;&gt;six month release cadence&lt;/a&gt; has been adopted.&#xA;This means developers don‚Äôt have to wait years for new APIs and language features,&#xA;but they can get their hands onto the latest additions twice a year.&#xA;In this post I‚Äôd like to describe how you can try out new language features such as &lt;a href=&#34;http://openjdk.java.net/jeps/355&#34;&gt;Java 13 text blocks&lt;/a&gt; in the test code of your project,&#xA;while keeping your main code still compatible with older Java versions.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Quarkus Qute ‚Äì A Test Ride</title>
      <link>https://www.morling.dev/blog/quarkus-qute-test-ride/</link>
      <pubDate>Fri, 03 Jan 2020 10:00:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/quarkus-qute-test-ride/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;One of the long-awaited features in Quarkus was support for server-side templating:&#xA;until recently, Quarkus supported only client-side web frameworks which obtain there data by calling a REST API on the backend.&#xA;This has changed with &lt;a href=&#34;https://quarkus.io/blog/quarkus-1-1-0-final-released/&#34;&gt;Quarkus 1.1&lt;/a&gt;: it comes with a brand-new template engine named &lt;a href=&#34;https://quarkus.io/guides/qute&#34;&gt;Qute&lt;/a&gt;,&#xA;which allows to build web applications using server-side templates.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Automatically Deploying a Hugo Website via GitHub Actions</title>
      <link>https://www.morling.dev/blog/automatically-deploying-hugo-website-via-github-actions/</link>
      <pubDate>Thu, 26 Dec 2019 10:00:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/automatically-deploying-hugo-website-via-github-actions/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;As a software engineer, I like to automate tedious tasks as much as possible.&#xA;The deployment of this website is no exception:&#xA;it is built using the &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; static site generator and hosted on &lt;a href=&#34;https://pages.github.com/&#34;&gt;GitHub Pages&lt;/a&gt;;&#xA;so wouldn‚Äôt it be nice if the rendered website would automatically be published whenever an update is pushed to its source code repository?&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Time for a New Blog</title>
      <link>https://www.morling.dev/blog/time-for-new-blog/</link>
      <pubDate>Thu, 26 Dec 2019 10:00:00 +0100</pubDate>
      <guid>https://www.morling.dev/blog/time-for-new-blog/</guid>
      <description>&lt;div class=&#34;paragraph&#34;&gt;&#xA;&lt;p&gt;It has been quite a while since the last post on my old &lt;a href=&#34;http://musingsofaprogrammingaddict.blogspot.com/&#34;&gt;personal blog&lt;/a&gt;;&#xA;since then, I‚Äôve mostly focused on writing about my day-work on the &lt;a href=&#34;https://debezium.io/blog/&#34;&gt;Debezium blog&lt;/a&gt; as well as &lt;a href=&#34;https://in.relation.to/gunnar-morling/&#34;&gt;some posts&lt;/a&gt; about more general technical topics on the Hibernate team blog.&lt;/p&gt;&#xA;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
